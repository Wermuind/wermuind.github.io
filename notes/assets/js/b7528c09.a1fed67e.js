"use strict";(self.webpackChunknotes=self.webpackChunknotes||[]).push([[3433],{1589:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(5893),i=t(1151);const s={},a="\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430: TypeScript",l={id:"js/ts-code",title:"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430: TypeScript",description:"\u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0435\u043a\u0442.",source:"@site/notes/js/ts-code.md",sourceDirName:"js",slug:"/js/ts-code",permalink:"/notes/js/ts-code",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"main",previous:{title:"Style Guide",permalink:"/notes/js/ts-style-guide"},next:{title:"Object",permalink:"/notes/js/object"}},c={},d=[{value:"\u0422\u0438\u043f\u044b",id:"types",level:3},{value:"Utils",id:"utils",level:3},{value:"Math",id:"math",level:3},{value:"Set",id:"set",level:3},{value:"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438",id:"strings",level:3},{value:"\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f",id:"regex",level:3},{value:"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0446\u0432\u0435\u0442\u043e\u043c",id:"colors",level:3}];function o(n){const e={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"\u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b-\u043a\u043e\u0434\u0430-typescript",children:"\u0424\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430: TypeScript"}),"\n",(0,r.jsx)(e.p,{children:"\u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u0444\u0440\u0430\u0433\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u043f\u0440\u043e\u0435\u043a\u0442."}),"\n",(0,r.jsx)(e.h3,{id:"types",children:"\u0422\u0438\u043f\u044b"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u041f\u0440\u0438\u043c\u0438\u0442\u0438\u0432\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 JS (\u043a\u0440\u043e\u043c\u0435 symbol). */\ntype PrimitiveValue = string | number | boolean | null | undefined;\n\n/** \u0414\u0432\u0443\u043c\u0435\u0440\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u0435\u043b. */\ntype Matrix = number[][];\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0421\u0442\u0440\u043e\u043a\u0430, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0430\u044f \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0434\u0430\u0442\u0443.\n * @example\n * '2024-03-03'\n * '03.03.2024'\n */\ntype DateString = string;\n\n/** \u0421\u0442\u0440\u043e\u043a\u0430, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0430\u044f \u043a\u0430\u043a\u043e\u0439-\u043b\u0438\u0431\u043e \u0446\u0432\u0435\u0442.\n * @example\n * '#112233'\n * 'rgb(255, 255, 255)'\n */\ntype ColorString = string;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"utils",children:"Utils"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435 \u043f\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e. */\nexport function findInTree<T>(\n  tree: T[], callback: (node: T) => boolean,\n  childrenField: string = 'children',\n): T | undefined {\n  for (const node of tree) {\n    if (callback(node)) return node;\n    const children = node[childrenField];\n    if (Array.isArray(children)) {\n      const item = findInTree(children, callback, childrenField);\n      if (item !== undefined) return item;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/**\n * @example\n * let array = [0, 0, 1, 0, 1, 0, 0];\n * trimArray(array, item => !item); // [1, 0, 1]\n * */\nfunction trimArray<T>(array: T[], criterion: (e: T) => boolean): T[] {\n  let from = 0;\n  let to = array.length;\n\n  for (let i = 0; i < array.length; i++) {\n    if (!criterion(array[i])) { from = i; break; }\n  }\n  for (let i = array.length - 1; i >= 0; i--) {\n    if (!criterion(array[i])) { to = i + 1; break; }\n  }\n  return array.slice(from, to);\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"math",children:"Math"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u041e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n * @param n \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u043a\u0440\u0443\u0433\u043b\u0438\u0442\u044c\n * @param digits \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u044f\u0442\u043e\u0439\n * @example\n * round(0.234, 2) => 0.23\n * round(234, -2) => 200\n */\nfunction round(n: number, digits: number = 0): number {\n  const multiplier = Math.pow(10, digits);\n  return Math.round(n * multiplier) / multiplier;\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0436\u0434\u0443 `min` \u0438 `max`. */\nfunction random(min: number = 0, max: number = 1): number {\n  return min + Math.random() * (max - min);\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"set",children:"Set"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function setEquality<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n  for (const element of a) {\n    if (!b.has(element)) return false;\n  }\n  return true;\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/**\n * @example\n * let a = new Set([1, 2]);\n * let b = new Set([2, 3]);\n * setUnion(a, b); // Set { 1, 2, 3 }\n */\nfunction setUnion<T>(a: Set<T>, b: Set<T>): Set<T> {\n  const union = new Set(a);\n  for (const element of b) union.add(element);\n  return union;\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/**\n * @example\n * let a = new Set([1, 2, 3]);\n * let b = new Set([2, 3, 4]);\n * setIntersection(a, b); // Set { 2, 3 }\n */\nfunction setIntersection<T>(a: Set<T>, b: Iterable<T>): Set<T> {\n  const intersection = new Set<T>();\n  for (const element of b) {\n    if (a.has(element)) intersection.add(element);\n  }\n  return intersection;\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"function setDifference<T>(a: Set<T>, b: Iterable<T>): Set<T> {\n  const result = new Set(a);\n  for (const element of b) {\n    if (result.has(element)) result.delete(element);\n  }\n  return result;\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0414\u0435\u043a\u0430\u0440\u0442\u043e\u0432\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435.\n * @example\n * cartesianProduct([1, 2], [3, 4]) => [[1, 3], [1, 4], [2, 3], [2, 4]]\n * */\nfunction cartesianProduct(...values: any[][]): any[][] {\n  return values.reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())));\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"strings",children:"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044e \u0438\u0441\u043a\u043e\u043c\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438.\n * @example\n * splitByFirstOccurrence('1, 2, 3', ', ') => ['1', '2, 3']\n * */\nfunction splitByFirstOccurrence(input: string, search: string): [string, string] {\n  const index = input.indexOf(search);\n  if (index === -1) return [input, ''];\n  return [input.substring(0, index), input.substring(index + search.length)];\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044e \u0438\u0441\u043a\u043e\u043c\u043e\u0439 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0438.\n * @example\n * splitByLastOccurrence('1, 2, 3', ', ') => ['1, 2', '3']\n * */\nfunction splitByLastOccurrence(input: string, search: string): [string, string] {\n  const index = input.lastIndexOf(search);\n  if (index === -1) return ['', input];\n  return [input.substring(0, index), input.substring(index + search.length)];\n}\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0420\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u0443.\n * @example\n * splitByIndex('1234', 2) => ['12', '34']\n * splitByIndex('1234', 0)  => ['', '1234']\n * */\nfunction splitByIndex(input: string, index: number): [string, string] {\n  return [input.substring(0, index), input.substring(index)];\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"regex",children:"\u0420\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"/** \u0427\u0438\u0441\u043b\u043e \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u043c \u0432 \u0432\u0438\u0434\u0435 \u0442\u043e\u0447\u043a\u0438 \u0438\u043b\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. */\nconst intOrDecimalRegExp = /^[+-]?((\\d+([.,]\\d*)?)|([.,]\\d+))$/;\n\n/** \u0425\u0435\u043a\u0441 \u0446\u0432\u0435\u0442\u0430, \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0440\u0430\u0449\u0451\u043d\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430 \u0438 \u0430\u043b\u044c\u0444\u0430 \u043a\u0430\u043d\u0430\u043b. */\nconst colorHexRegExp = /^#([\\da-f]{8}|[\\da-f]{6}|[\\da-f]{3})$/i;\n"})}),"\n",(0,r.jsx)(e.h3,{id:"colors",children:"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0446\u0432\u0435\u0442\u043e\u043c"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"type RGBA = [number, number, number, number];\n\n/** \u041d\u0430\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442 \u0446\u0432\u0435\u0442 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439.\n * @example\n * overlayColor([0, 0, 0, 0.5], [255, 255, 255, 0.5]) => [170, 170, 170, 0.75]\n * */\nfunction overlayColor(base: RGBA, additive: RGBA): RGBA {\n  const baseAlpha = base[3];\n  const addedAlpha = additive[3];\n  if (!baseAlpha) return additive;\n  if (!addedAlpha) return base;\n\n  const alpha = 1 - (1 - addedAlpha) * (1 - baseAlpha);\n  const additiveWeight = addedAlpha / alpha;\n  const baseWeight = baseAlpha * (1 - baseAlpha) / alpha;\n\n  const red   = Math.round(additive[0] * additiveWeight + base[0] * baseWeight);\n  const green = Math.round(additive[1] * additiveWeight + base[1] * baseWeight);\n  const blue  = Math.round(additive[2] * additiveWeight + base[2] * baseWeight);\n\n  return [red, green, blue, alpha];\n}\n"})})]})}function u(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>a});var r=t(7294);const i={},s=r.createContext(i);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);